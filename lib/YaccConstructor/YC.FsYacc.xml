<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>YC.FsYacc</name></assembly>
<members>
<member name="T:FSharp.PowerPack.FsYacc.AST.PropagateTable">
<summary>
 A mutable table giving a Set&lt;KernelItemIndex&gt; for each kernel. The kernels represent the
 &quot;propagate&quot; items for the kernel. TODO: document this more w.r.t. the Dragon book.
</summary>
</member>
<member name="T:FSharp.PowerPack.FsYacc.AST.SpontaneousTable">
<summary>
 A mutable table giving a lookahead set Set&lt;Terminal&gt; for each kernel. The terminals represent the
 &quot;spontaneous&quot; items for the kernel. TODO: document this more w.r.t. the Dragon book.
</summary>
</member>
<member name="T:FSharp.PowerPack.FsYacc.AST.Closure1Table">
<summary>
 Hold the results of cpmuting the LALR(1) closure of an LR(0) kernel
</summary>
</member>
<member name="T:FSharp.PowerPack.FsYacc.AST.KernelTable">
<summary>
 A mutable table giving an index to each LR(0) kernel. Kernels are referred to only by index.
</summary>
</member>
<member name="T:FSharp.PowerPack.FsYacc.AST.LookaheadTable">
<summary>
 A mutable table maping kernels to sets of lookahead tokens
</summary>
</member>
<member name="T:FSharp.PowerPack.FsYacc.AST.ProductionTable">
<summary>
 Allocate indexes for each production
</summary>
</member>
<member name="T:FSharp.PowerPack.FsYacc.AST.TerminalTable">
<summary>
 Allocate indexes for each terminal
</summary>
</member>
<member name="T:FSharp.PowerPack.FsYacc.AST.NonTerminalTable">
<summary>
 Allocate indexes for each non-terminal
</summary>
</member>
<member name="T:FSharp.PowerPack.FsYacc.AST.GotoItemIndex">
<summary>
 Indexes into the memoizing table for the Goto computations
 Embed in a single integer, since these are faster
 keys for the dictionary hash tables

 Logically:

   type GotoItemIndex = GotoItemIdx of KernelIdx * SymbolIndex
</summary>
</member>
<member name="T:FSharp.PowerPack.FsYacc.AST.KernelItemIndex">
<summary>
 Indexes in the LookaheadTable, SpontaneousTable, PropagateTable
 Embed in a single integer, since these are faster
 keys for the dictionary hash tables

 Logically:

   type KernelItemIndex = KernelItemIdx of KernelIdx * Item0
</summary>
</member>
<member name="T:FSharp.PowerPack.FsYacc.AST.SymbolIndex">
<summary>
 Representation of Symbols.
 Ideally would be declared as 
    type SymbolIndex = PTerminal of TerminalIndex | PNonTerminal of NonTerminalIndex
 but for performance reasons we embed as a simple integer (saves ~10%)

 We use an active pattern to reverse the embedding.
</summary>
</member>
<member name="T:FSharp.PowerPack.FsYacc.AST.TerminalIndex">
<summary>
 Indexes in the TerminalTable and NonTerminalTable
</summary>
</member>
<member name="T:FSharp.PowerPack.FsYacc.AST.KernelIdx">
<summary>
 Indexes of LR(0) kernels in the KernelTable
</summary>
</member>
<member name="T:FSharp.PowerPack.FsYacc.AST.Kernel">
<summary>
 LR(0) kernels
</summary>
</member>
<member name="T:FSharp.PowerPack.FsYacc.AST.Action">
<summary>
 Part of the output of CompilerLalrParserSpec
</summary>
</member>
<member name="T:FSharp.PowerPack.FsYacc.AST.Item0">
<summary>
 Represent (ProductionIndex,ProdictionDotIndex) as one integer 
</summary>
</member>
<member name="M:FSharp.PowerPack.FsYacc.AST.CompilerLalrParserSpec``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit},FSharp.PowerPack.FsYacc.AST.ProcessedParserSpec)">
<summary>
 Compile a pre-processed LALR parser spec to tables following the Dragon book algorithm
</summary>
</member>
<member name="M:FSharp.PowerPack.FsYacc.AST.CreateDictionary``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
<summary>
 A standard utility to create a dictionary from a list of pairs
</summary>
</member>
<member name="M:FSharp.PowerPack.FsYacc.AST.Memoize``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1})">
<summary>
 A general standard memoization utility. Be sure to apply to only one (function) argument to build the
 residue function!
</summary>
</member>
<member name="M:FSharp.PowerPack.FsYacc.AST.LeastFixedPoint``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Collections.FSharpList{``0}},Microsoft.FSharp.Collections.FSharpSet{``0})">
<summary>
 A standard utility to compute a least fixed point of a set under a generative computation
</summary>
</member>
<member name="M:FSharp.PowerPack.FsYacc.AST.ProcessWorkList``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}})">
<summary>
 Create a work list and loop until it is exhausted, calling a worker function for
 each element. Pass a function to queue additional work on the work list 
 to the worker function
</summary>
</member>
<member name="M:FSharp.PowerPack.FsYacc.AST.|KeyValue|``2(System.Collections.Generic.KeyValuePair{``0,``1})">
<summary>
 An active pattern that should be in the F# standard library
</summary>
</member>
<member name="M:FSharp.PowerPack.FsYacc.Driver.UnicodeFileAsLexbuf(System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Standard utility to create a Unicode LexBuffer

 One small annoyance is that LexBuffers and not IDisposable. This means 
 we can&apos;t just return the LexBuffer object, since the file it wraps wouldn&apos;t
 get closed when we&apos;re finished with the LexBuffer. Hence we return the stream,
 the reader and the LexBuffer. The caller should dispose the first two when done.
</summary>
</member>
<member name="M:FSharp.PowerPack.FsYacc.Parser.prodIdxToNonTerminal(System.Int32)">
<summary>
 This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.ArgInfo.Name">
<summary>
 Return the name of the argument
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.ArgInfo.HelpText">
<summary>
 Return the usage help associated with the argument
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.ArgInfo.ArgType">
<summary>
 Return the argument type and action of the argument
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.ArgParser.Usage(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Text.ArgInfo},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Prints the help for each argument.
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.ArgParser.ParsePartial(Microsoft.FSharp.Core.FSharpRef{System.Int32},System.String[],System.Collections.Generic.IEnumerable{Microsoft.FSharp.Text.ArgInfo},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Parse some of the arguments given by &apos;argv&apos;, starting at the given position
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.ArgParser.Parse(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Text.ArgInfo},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Parse the arguments given by System.Environment.GetEnvironmentVariables()
 according to the argument processing specifications &quot;specs&quot;.
 Args begin with &quot;-&quot;. Non-arguments are passed to &quot;f&quot; in
 order.  &quot;use&quot; is printed as part of the usage line if an error occurs.
</summary>
</member>
<member name="T:Microsoft.FSharp.Text.ArgType">
<summary>
 The spec value describes the action of the argument,
 and whether it expects a following parameter.
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.UnicodeTables.Interpret(System.Int32,Microsoft.FSharp.Text.Lexing.LexBuffer{System.Char})">
<summary>
 Interpret tables for a unicode lexer generated by fslex. 
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.UnicodeTables.AsyncInterpret(System.Int32,Microsoft.FSharp.Text.Lexing.LexBuffer{System.Char})">
<summary>
 Interpret tables for a unicode lexer generated by fslex, processing input asynchronously
</summary>
</member>
<member name="T:Microsoft.FSharp.Text.Lexing.UnicodeTables">
<summary>
 The type of tables for an unicode lexer generated by fslex. 
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.AsciiTables.Interpret(System.Int32,Microsoft.FSharp.Text.Lexing.LexBuffer{System.Byte})">
<summary>
 Interpret tables for an ascii lexer generated by fslex. 
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.AsciiTables.AsyncInterpret(System.Int32,Microsoft.FSharp.Text.Lexing.LexBuffer{System.Byte})">
<summary>
 Interpret tables for an ascii lexer generated by fslex, processing input asynchronously
</summary>
</member>
<member name="T:Microsoft.FSharp.Text.Lexing.AsciiTables">
<summary>
 The type of tables for an ascii lexer generated by fslex. 
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.LexBuffer`1.StartPos(Microsoft.FSharp.Text.Lexing.Position)">
<summary>
 The start position for the lexeme
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.LexBuffer`1.IsPastEndOfStream(System.Boolean)">
<summary>
 True if the refill of the buffer ever failed , or if explicitly set to true.
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.LexBuffer`1.EndPos(Microsoft.FSharp.Text.Lexing.Position)">
<summary>
 The end position for the lexeme
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.LexBuffer`1.StartPos">
<summary>
 The start position for the lexeme
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.LexBuffer`1.LexemeLength">
<summary>
 The length of the matched string 
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.LexBuffer`1.Lexeme">
<summary>
 The matched string 
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.LexBuffer`1.IsPastEndOfStream">
<summary>
 True if the refill of the buffer ever failed , or if explicitly set to true.
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.LexBuffer`1.EndPos">
<summary>
 The end position for the lexeme
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.LexBuffer`1.BufferLocalStore">
<summary>
 Dynamically typed, non-lexically scoped parameter table
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.LexBuffer`1.LexemeString(Microsoft.FSharp.Text.Lexing.LexBuffer{System.Char})">
<summary>
 Fast helper to turn the matched characters into a string, avoiding an intermediate array
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.LexBuffer`1.LexemeChar(System.Int32)">
<summary>
 Fetch a particular character in the matched string 
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.LexBuffer`1.FromTextReader(System.IO.TextReader)">
<summary>
 Create a lex buffer suitable for use with a Unicode lexer that reads character inputs from the given text reader
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.LexBuffer`1.FromString(System.String)">
<summary>
 Create a lex buffer suitable for Unicode lexing that reads characters from the given string
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.LexBuffer`1.FromFunction(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{`0[],System.Int32,System.Int32},System.Int32})">
<summary>
 Create a lex buffer that reads character or byte inputs by using the given function
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.LexBuffer`1.FromChars(System.Char[])">
<summary>
 Create a lex buffer suitable for Unicode lexing that reads characters from the given array
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.LexBuffer`1.FromBytes(System.Byte[])">
<summary>
 Create a lex buffer suitable for byte lexing that reads characters from the given array
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.LexBuffer`1.FromBinaryReader(System.IO.BinaryReader)">
<summary>
 Create a lex buffer suitable for use with ASCII byte lexing that reads byte inputs from the given binary reader
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.LexBuffer`1.FromAsyncFunction(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{`0[],System.Int32,System.Int32},Microsoft.FSharp.Control.FSharpAsync{System.Int32}})">
<summary>
 Create a lex buffer that asynchronously reads character or byte inputs by using the given function
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.LexBuffer`1.DiscardInput">
<summary>
 Remove all input, though don&apos;t discard the current lexeme 
</summary>
</member>
<member name="T:Microsoft.FSharp.Text.Lexing.LexBuffer`1">
<summary>
 Input buffers consumed by lexers generated by &lt;c&gt;fslex.exe &lt;/c&gt;
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.Position.pos_cnum">
<summary>
 The absolute offset of the column for the position
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.Position.pos_bol">
<summary>
 The absolute offset of the beginning of the line
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.Position.pos_lnum">
<summary>
 The line number for the position
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.Position.pos_fname">
<summary>
 The file name for the position
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.Position.StartOfLineAbsoluteOffset">
<summary>
 Return absolute offset of the start of the line marked by the position
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.Position.Line">
<summary>
 The line number in the input stream, assuming fresh positions have been updated 
 using AsNewLinePos() and by modifying the EndPos property of the LexBuffer.
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.Position.FileName">
<summary>
 The file name associated with the input stream.
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.Position.Empty">
<summary>
 Get an arbitrary position, with the empty string as filename, and  
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.Position.Column">
<summary>
 Return the column number marked by the position, i.e. the difference between the AbsoluteOffset and the StartOfLineAbsoluteOffset
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Lexing.Position.AbsoluteOffset">
<summary>
 The character number in the input stream
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.Position.ShiftColumnBy(System.Int32)">
<summary>
 Gives a position shifted by specified number of characters
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.Position.FirstLine(System.String)">
<summary>
 Get a position corresponding to the first line (line number 1) in a given file
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Lexing.Position.EndOfToken(System.Int32)">
<summary>
 Given a position at the start of a token of length n, return a position just beyond the end of the token
</summary>
</member>
<member name="T:Microsoft.FSharp.Text.Lexing.Position">
<summary>
 Position information stored for lexing tokens
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.tagOfErrorTerminal">
<summary>
 The tag of the error terminal
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.numTerminals">
<summary>
 The total number of terminals 
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.parseError">
<summary>
 This function is used to hold the user specified &quot;parse_error&quot; or &quot;parse_error_rich&quot; functions
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.productionToNonTerminalTable">
<summary>
 This table is logically part of the Goto table
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.stateToProdIdxsTableRowOffsets">
<summary>
 The sparse table offsets for the productions active for each state
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.stateToProdIdxsTableElements">
<summary>
 The sparse table for the productions active for each state
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.sparseGotoTableRowOffsets">
<summary>
 The sparse goto table row offsets
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.gotos">
<summary>
 The sparse goto table
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.immediateActions">
<summary>
 The immediate action table
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.reductionSymbolCounts">
<summary>
 The number of symbols for each reduction
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.actionTableRowOffsets">
<summary>
 The sparse action table row offsets
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.actionTableElements">
<summary>
 The sparse action table elements
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.dataOfToken">
<summary>
 A function to compute the data carried by a token
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.tagOfToken">
<summary>
 A function to compute the tag of a token
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.endOfInputTag">
<summary>
 The token number indicating the end of input
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.Tables`1.reductions">
<summary>
 The reduction table
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Parsing.Tables`1.Interpret``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Text.Lexing.LexBuffer{``0},`0},Microsoft.FSharp.Text.Lexing.LexBuffer{``0},System.Int32)">
<summary>
 Interpret the parser table taking input from the given lexer, using the given lex buffer, and the given start state.
 Returns an object indicating the final synthesized value for the parse.
</summary>
</member>
<member name="T:Microsoft.FSharp.Text.Parsing.Tables`1">
<summary>
 Tables generated by fsyacc
 The type of the tables contained in a file produced by the fsyacc.exe parser generator.
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.ParseErrorContext`1.StateStack">
<summary>
 The stack of state indexes active at the parse error 
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.ParseErrorContext`1.ShiftTokens">
<summary>
 The token that would cause a shift at the parse error
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.ParseErrorContext`1.ReducibleProductions">
<summary>
 The stack of productions that would be reduced at the parse error 
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.ParseErrorContext`1.ReduceTokens">
<summary>
 The tokens that would cause a reduction at the parse error 
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.ParseErrorContext`1.ParseState">
<summary>
 The state active at the parse error 
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.ParseErrorContext`1.Message">
<summary>
 The message associated with the parse error
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.ParseErrorContext`1.CurrentToken">
<summary>
 The token that caused the parse error
</summary>
</member>
<member name="T:Microsoft.FSharp.Text.Parsing.ParseErrorContext`1">
<summary>
 The context provided when a parse error occurs
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.IParseState.ResultRange">
<summary>
 Get the full range of positions matched by the production
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.Parsing.IParseState.ParserLocalStore">
<summary>
 Get the store of local values associated with this parser
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Parsing.IParseState.RaiseError``1">
<summary>
 Raise an error in this parse context
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Parsing.IParseState.InputStartPosition(System.Int32)">
<summary>
 Get the start position for the terminal or non-terminal at a given index matched by the production
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Parsing.IParseState.InputRange(System.Int32)">
<summary>
 Get the start and end position for the terminal or non-terminal at a given index matched by the production
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Parsing.IParseState.InputEndPosition(System.Int32)">
<summary>
 Get the end position for the terminal or non-terminal at a given index matched by the production
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Parsing.IParseState.GetInput(System.Int32)">
<summary>
 Get the value produced by the terminal or non-terminal at the given position
</summary>
</member>
<member name="T:Microsoft.FSharp.Text.Parsing.IParseState">
<summary>
 The information accessible via the &lt;c&gt;parseState&lt;/c&gt; value within parser actions.
</summary>
</member>
<member name="T:Microsoft.FSharp.Text.Parsing.RecoverableParseError">
<summary>
 Indicates a parse error has occured and parse recovery is in progress
</summary>
</member>
<member name="T:Microsoft.FSharp.Text.Parsing.Accept">
<summary>
 Indicates an accept action has occured
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Parsing.ParseHelpers.parse_error(System.String)">
<summary>
 The default implementation of the parse_error function
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.Parsing.ParseHelpers.parse_error_rich``1">
<summary>
 The default implementation of the parse_error_rich function
</summary>
</member>
<member name="T:Microsoft.FSharp.Text.Parsing.ParseHelpers">
<summary>
 Helpers used by generated parsers.
</summary>
</member>
</members>
</doc>
