<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>YC.Common</name></assembly>
<members>
<member name="M:Yard.Core.Checkers.sourcesWithoutFileNames(Yard.Core.IL.Definition.t{Yard.Core.IL.Source.t,Yard.Core.IL.Source.t})">
<summary>
 Usage example: check after conversion, that we didn&apos;t lose any binding to source (e.g. position)
</summary>
</member>
<member name="M:Yard.Core.Helpers.metaRulesTbl(Microsoft.FSharp.Collections.FSharpList{Yard.Core.IL.Grammar.Module{Yard.Core.IL.Source.t,Yard.Core.IL.Source.t}})">
<summary>
 hash table for metarules. 
 Map: using_module -&gt; (rule_name -&gt; (decl_module, rule_decl));
</summary>
</member>
<member name="M:Yard.Core.Helpers.isMetaRule(Yard.Core.IL.Rule.t{Yard.Core.IL.Source.t,Yard.Core.IL.Source.t})">
<summary>
 if rule has metaArgs then it is a metarule
</summary>
</member>
<member name="M:Yard.Core.Helpers.getRulesMap``2(Microsoft.FSharp.Collections.FSharpList{Yard.Core.IL.Grammar.Module{``0,``1}})">
<summary>
 For each module creates map: rule -&gt; (module, in which the rule is declared)
</summary>
</member>
<member name="M:Yard.Core.Helpers.getPublicRules``2(Microsoft.FSharp.Collections.FSharpList{Yard.Core.IL.Grammar.Module{``0,``1}})">
<summary>
 Map: module -&gt; (list of public rules, declared in it)
</summary>
</member>
<member name="P:Yard.Core.IL.Definition.t`2.tokens">

</member>
<member name="P:Yard.Core.IL.Definition.t`2.foot">
<summary>
 Text after a grammar description, what will be simply copied
</summary>
</member>
<member name="P:Yard.Core.IL.Definition.t`2.grammar">
<summary>
 Grammar description itself
</summary>
</member>
<member name="P:Yard.Core.IL.Definition.t`2.head">
<summary>
 Text before a grammar description ( e.g. some open-s), what will be simply copied
</summary>
</member>
<member name="P:Yard.Core.IL.Definition.t`2.info">
<summary>
 Contains information (e.g. origin) about this grammar description
</summary>
</member>
<member name="M:Yard.Core.IL.Definition.empty``2">
<summary>
 Empty grammar
</summary>
</member>
<member name="T:Yard.Core.IL.Grammar.t`2">
<summary>
 Grammar is a list of modules
</summary>
</member>
<member name="P:Yard.Core.IL.Grammar.Module`2.allPublic">
<summary>
 Are all rules public (can be seen form another module), except explicitly marked as private.
 Otherwise rule must be directly marked as public to be seen.
</summary>
</member>
<member name="P:Yard.Core.IL.Grammar.Module`2.rules">
<summary>
 Module is a list of rules
</summary>
</member>
<member name="P:Yard.Core.IL.Rule.t`2.metaArgs">
<summary>
 List of meta-arguments - names of rules, parametrizing this rule.
</summary>
</member>
<member name="P:Yard.Core.IL.Rule.t`2.isPublic">
<summary>
 Can this rule be seen from another module.
 It&apos;s true if (&apos;public&apos; is used before rule) or (module is marked as AllPublic and rule isn&apos;t marked as private)
</summary>
</member>
<member name="P:Yard.Core.IL.Rule.t`2.isStart">
<summary>
 Is this rule a start non-terminal (in this case &apos;[&lt;Start&gt;]&apos; is used before rule)
</summary>
</member>
<member name="P:Yard.Core.IL.Rule.t`2.body">
<summary>
 Rule body (production).
</summary>
</member>
<member name="P:Yard.Core.IL.Rule.t`2.args">
<summary>
 Heritable arguments of rule
</summary>
</member>
<member name="P:Yard.Core.IL.Rule.t`2.name">
<summary>
 Rule name. Used to start from this or to be referenced to from other rules.
</summary>
</member>
<member name="T:Yard.Core.IL.Rule.t`2">
 <summary>
 <para>t&lt;'patt,'expr&gt; - Type of rule. </para>
 <para>  'patt - type of attributes (arguments). </para>
 <para>  'expr - type of expressions in action code. </para>
 <para>Rule have the following format: </para>
 <para>  [+]name&lt;&lt; metaArgs &gt;&gt;[args] : body; </para>
 </summary>
</member>
<member name="T:Yard.Core.IL.Production.t`2.POpt">
<summary>
 expr?
</summary>
</member>
<member name="T:Yard.Core.IL.Production.t`2.PSome">
<summary>
 expr+
</summary>
</member>
<member name="T:Yard.Core.IL.Production.t`2.PPerm">
<summary>
 Permutation (A || B || C)
</summary>
</member>
<member name="T:Yard.Core.IL.Production.t`2.PRepet">
<summary>
 Extended regexp repetition, &quot;man egrep&quot; for details
</summary>
</member>
<member name="T:Yard.Core.IL.Production.t`2.PLiteral">
<summary>
 Literal. We can use constants (&quot;if&quot; and &quot;then&quot; in &apos; ..&quot;if&quot; expr &quot;then&quot; expr...&apos;)
</summary>
</member>
<member name="T:Yard.Core.IL.Production.t`2.PMetaRef">
<summary>
 Reference to metarule inside production (mr&lt;&lt;x&gt;&gt; in rule &quot;a: mr&lt;&lt;x&gt;&gt; y z&quot;)
</summary>
</member>
<member name="T:Yard.Core.IL.Production.t`2.PMany">
<summary>
 expr*
</summary>
</member>
<member name="T:Yard.Core.IL.Production.t`2.PRef">
<summary>
 Reference to other rule inside production. With an optional args list.
</summary>
</member>
<member name="T:Yard.Core.IL.Production.t`2.PToken">
<summary>
 Token itself. Final element of parsing.
</summary>
</member>
<member name="T:Yard.Core.IL.Production.t`2.PSeq">
<summary>
 Sequence * attribute. (Attribute is always applied to sequence) 
</summary>
</member>
<member name="T:Yard.Core.IL.Production.t`2.PConj">
<summary>
 Conjunction (e1 &amp; e2)
</summary>
</member>
<member name="T:Yard.Core.IL.Production.t`2.PAlt">
<summary>
 Alternative (e1 | e2)
</summary>
</member>
<member name="T:Yard.Core.IL.Production.t`2">
 <summary>
 <para>t&lt;'patt,'expr&gt; - Type of production node in derivation tree. </para>
 <para>  'patt - type of l-attributes. </para>
 <para>  'expr - type of expressions in action code. </para>
 </summary>
</member>
<member name="P:Yard.Core.IL.Production.elem`2.checker">
<summary>
 Almost resolver (condition in production).
</summary>
</member>
<member name="P:Yard.Core.IL.Production.elem`2.binding">
<summary>
 Binding :) like f:F or f:=F.... Seal 
</summary>
</member>
<member name="P:Yard.Core.IL.Production.elem`2.rule">
<summary>
 Production rule itself.
</summary>
</member>
<member name="P:Yard.Core.IL.Production.elem`2.omit">
<summary>
 Don&apos;t include rule into AST
</summary>
</member>
<member name="T:Yard.Core.IL.Source.t">
<summary>
 Type of elementary part of source grammar
</summary>
</member>
</members>
</doc>
